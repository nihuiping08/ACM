/*
 * 题目:
 *		给出n个数，现在问从1到m只能够被这n个数中的一个数整除的个数
 *
 *	分析：
 *		我们上一题是最少能够被这n个数中的一个整除，所以我们可以很容易用容斥解决掉。
 *		那么这题其实就相当于那题的稍微变形，求的是只能够被n个数中的一个整除。直观上
 *		来看，我们需要把两个或者两个以上的去掉。所以还是用容斥来做，只不过在加减的
 *		时候需要控制一下就好了。
 *		1.在只有两个的时候，减掉的个数*2。
 *		2.在加三的时候，由于在减二时多减了，所以我们得要加回来，然后再减掉自己那个
 *		  部分，刚好是*3
 *
 *		我们可以以2,3,5，m = 30为例说明如何解决本题
 *   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
 * 2:  2   4   6   8   10    12    14    16    18    20    22    24    26    28    30
 * 3:    3     6     9       12       15       18       21       24       27       30
 *
 * */
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

#define debug puts("here")

typedef long long ll;

const int X = 105;

int size;
int di[X];

int gcd(int x,int y){
	return x==0?y:gcd(y%x,x);
}

void cal(ll n){
	ll sum = 0;
	for(int i=1;i<(1<<size);i++){
		ll s = 1;
		int ok = 0;
		for(int j=0;j<size;j++)
			if( i & (1<<j) ){
				s = s/gcd(s,di[j])*di[j];
				ok ++;
			}
		if(ok&1)
			sum += n/s*ok;
		else
			sum -= n/s*ok;
	}
	cout<<sum<<endl;
}


int main(){
#ifndef ONLINE_JUDGE
	freopen("suma.txt","r",stdin);
#endif
	int ncase,m;
	cin>>ncase;
	while(ncase--){
		scanf("%d%d",&size,&m);
		for(int i=0;i<size;i++)
			scanf("%d",&di[i]);
		cal(m);
	}
	return 0;
}

